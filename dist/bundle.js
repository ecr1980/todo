(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>A});var o=e(537),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([n.id,"body {\n  background-color: black;\n  color: white;\n  position: relative;\n}\n\n.back {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.content {\n  display: grid;\n  grid-template-columns: 240px 1fr;\n}\n\n.content-window {\n  background-color:rgb(206, 206, 206);\n  display: grid;\n  justify-content: center;\n  align-items: center;\n  padding-left: 5vw;\n  padding-right: 5vw;\n}\n\n.display {\n  background-color: white;\n  color: black;\n  border-style: solid;\n  border-width: 2px;\n  border-color: black;\n  border-radius: 20px;\n  display: grid;\n  grid-template-columns: 9fr 1fr;\n  grid-template-rows: max-content max-content 1fr;\n  padding: 20px;\n  position: relative;\n  height: 70vh;\n  margin-bottom: 10px;\n}\n\n.new-list-div {\n  padding-left: 20px;\n}\n\n.form-div {\n  background-color: white;\n  color: black;\n}\n\n.finished {\n  background-color: gray;\n  color: black;\n  text-decoration: line-through;\n}\n\n.main-list {\nbackground-color: black;\ndisplay: grid;\ngap: 5px;\nheight: 90vh;\ngrid-auto-rows: max-content;\n}\n\n.main-list-item {\n  border-style: solid;\n  border-width: 2px;\n  border-color:  rgb(116, 116, 116) rgb(116, 116, 116) rgb(46, 46, 46) rgb(46, 46, 46);\n  background-color: rgb(56, 55, 55);\n  color: white;\n  height: 30px;\n  width: 200px;\n  display: grid;\n  align-items: center;\n  justify-content: start;\n  padding-left: 20px;\n}\n\n.main-list-item:active {\n  background-color: rgb(96, 96, 96);\n}\n\n.parent-divs {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.parent-div {\n  background-color: white;\n  color: black;\n  border-style: solid;\n  border-width: 2px;\n  border-color: black;\n  border-radius: 20px;\n  padding: 20px;\n  height: 5vh;\n  width: 10vw;\n}\n\n.content-tasks-item {\n  border-style: solid;\n  border-width: 2px;\n  border-color:  rgb(196, 196, 196) rgb(196, 196, 196) rgb(156, 156, 156) rgb(156, 156, 156);\n  background-color: rgb(226, 226, 226);\n  height: 30px;\n  width: 200px;\n  display: grid;\n  align-items: center;\n  justify-content: start;\n  padding-left: 20px;\n}\n\n.content-tasks-item:active {\n  background-color: rgb(186, 186, 186);\n}\n\n.content-tasks {\n  display: grid;\n  gap: 5px;\n}\n\n.title, .description {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}\n\n.top-bar {\n  display: flex;\n  flex-direction: row;\n  align-content: space-between;\n\n}\n\n.top-bar-date {\n  padding-left: 20px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;EACE,aAAa;EACb,gCAAgC;AAClC;;AAEA;EACE,mCAAmC;EACnC,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,mBAAmB;EACnB,aAAa;EACb,8BAA8B;EAC9B,+CAA+C;EAC/C,aAAa;EACb,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,6BAA6B;AAC/B;;AAEA;AACA,uBAAuB;AACvB,aAAa;AACb,QAAQ;AACR,YAAY;AACZ,2BAA2B;AAC3B;;AAEA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,oFAAoF;EACpF,iCAAiC;EACjC,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,mBAAmB;EACnB,aAAa;EACb,WAAW;EACX,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,0FAA0F;EAC1F,oCAAoC;EACpC,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,4BAA4B;;AAE9B;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:["body {\n  background-color: black;\n  color: white;\n  position: relative;\n}\n\n.back {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n}\n\n.content {\n  display: grid;\n  grid-template-columns: 240px 1fr;\n}\n\n.content-window {\n  background-color:rgb(206, 206, 206);\n  display: grid;\n  justify-content: center;\n  align-items: center;\n  padding-left: 5vw;\n  padding-right: 5vw;\n}\n\n.display {\n  background-color: white;\n  color: black;\n  border-style: solid;\n  border-width: 2px;\n  border-color: black;\n  border-radius: 20px;\n  display: grid;\n  grid-template-columns: 9fr 1fr;\n  grid-template-rows: max-content max-content 1fr;\n  padding: 20px;\n  position: relative;\n  height: 70vh;\n  margin-bottom: 10px;\n}\n\n.new-list-div {\n  padding-left: 20px;\n}\n\n.form-div {\n  background-color: white;\n  color: black;\n}\n\n.finished {\n  background-color: gray;\n  color: black;\n  text-decoration: line-through;\n}\n\n.main-list {\nbackground-color: black;\ndisplay: grid;\ngap: 5px;\nheight: 90vh;\ngrid-auto-rows: max-content;\n}\n\n.main-list-item {\n  border-style: solid;\n  border-width: 2px;\n  border-color:  rgb(116, 116, 116) rgb(116, 116, 116) rgb(46, 46, 46) rgb(46, 46, 46);\n  background-color: rgb(56, 55, 55);\n  color: white;\n  height: 30px;\n  width: 200px;\n  display: grid;\n  align-items: center;\n  justify-content: start;\n  padding-left: 20px;\n}\n\n.main-list-item:active {\n  background-color: rgb(96, 96, 96);\n}\n\n.parent-divs {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.parent-div {\n  background-color: white;\n  color: black;\n  border-style: solid;\n  border-width: 2px;\n  border-color: black;\n  border-radius: 20px;\n  padding: 20px;\n  height: 5vh;\n  width: 10vw;\n}\n\n.content-tasks-item {\n  border-style: solid;\n  border-width: 2px;\n  border-color:  rgb(196, 196, 196) rgb(196, 196, 196) rgb(156, 156, 156) rgb(156, 156, 156);\n  background-color: rgb(226, 226, 226);\n  height: 30px;\n  width: 200px;\n  display: grid;\n  align-items: center;\n  justify-content: start;\n  padding-left: 20px;\n}\n\n.content-tasks-item:active {\n  background-color: rgb(186, 186, 186);\n}\n\n.content-tasks {\n  display: grid;\n  gap: 5px;\n}\n\n.title, .description {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}\n\n.top-bar {\n  display: flex;\n  flex-direction: row;\n  align-content: space-between;\n\n}\n\n.top-bar-date {\n  padding-left: 20px;\n}"],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],A=0;A<n.length;A++){var s=n[A],c=o.base?s[0]+o.base:s[0],d=i[c]||0,l="".concat(c," ").concat(d);i[c]=d+1;var p=e(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var g=r(u,o);o.byIndex=A,t.splice(A,0,{identifier:l,updater:g,references:1})}a.push(l)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=e(i[a]);t[A].references--}for(var s=o(n,r),c=0;c<i.length;c++){var d=e(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=s}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return n[o](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),o=e(795),r=e.n(o),i=e(569),a=e.n(i),A=e(565),s=e.n(A),c=e(216),d=e.n(c),l=e(589),p=e.n(l),u=e(426),g={};g.styleTagTransform=p(),g.setAttributes=s(),g.insert=a().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=d(),t()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;class m{items;listDepth;constructor(n=0){this.items=[],this.listDepth=n}addItem(n){this.items.push(n)}getLength(){return this.items.length}}class b{title;description;priority;finished;itemList;dueDate;notes;constructor(n="test",t="test",e=1,o,r="January 1st, 2023",i){this.title=n,this.description=t,this.priority=e,this.itemList=new m(o+1),this.finished=!1,this.itemDiv=this.itemList.ownDIv,this.dueDate=r,this.notes=i}}let h=new m;let B=new b("Sweep Floor","Get broom and sweep the floor.",1,0,"January 1st, 2023","There is a lot of dust on the floor."),C=new b("Clean Kitchen","The kitchen needs to have the stove cleaned.",2,0,"March 23rd, 2023","It's amazing how quickly a stove can get dirty after cooking 400 gallons of spaghetti sauce. Next year, perhaps you should plant fewer tomatos."),E=new b("Build Deck","Now that the old patio is gone, it's time for a new wooden deck.",3,0,"August 19th, 2022","Use cedar. It looks nice, it's relatively inexpensive, and it is naturally resistant to the elements."),f=new b("Feed the ducks","Remember not to give them bread, it isn't good for them.",5,0,"September 7th, 2074","The pond should be complete by now. Surely some ducks have flown in? If not, do a lot of quacking and they'll come."),v=new b,y=new b;h.addItem(B),h.addItem(C),h.addItem(E),h.addItem(f),B.itemList.addItem(v),C.itemList.addItem(y),function(n){if(0===n.items.length&&0===n.listDepth)displayInstructions();else{let t="main-list";n.listDepth>0&&(console.log("hi"),t="content-tasks");let e=document.getElementById(t);for(let o=0;o<n.items.length;o++){let r=document.createElement("button");r.setAttribute("class",`${t}-item`),r.setAttribute("id",`${t}-item-${o}`),r.innerText=n.items[o].title,r.addEventListener("click",(function(){var t;t=n.items[o],document.getElementById("title").innerText=t.title,document.getElementById("description").innerText=t.description,document.getElementById("priority").innerText=`Priority: ${t.priority}`,document.getElementById("due-date").innerText=t.dueDate,document.getElementById("notes").innerText=t.notes})),e.appendChild(r)}}}(h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,